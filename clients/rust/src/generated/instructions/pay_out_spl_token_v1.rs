//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct PayOutSplTokenV1 {
    /// The address of the game pot
    pub pot: solana_program::pubkey::Pubkey,
    /// The authority of the game pot
    pub game_authority: solana_program::pubkey::Pubkey,
    /// The account receiving the payout
    pub winner: solana_program::pubkey::Pubkey,
    /// The address of the token mint
    pub token_mint: solana_program::pubkey::Pubkey,
    /// The source token account
    pub pot_token_account: solana_program::pubkey::Pubkey,
    /// The destination token account
    pub winner_token_account: solana_program::pubkey::Pubkey,
    /// The token account of the game authority
    pub game_authority_token_account: solana_program::pubkey::Pubkey,
    /// The token program
    pub token_program: solana_program::pubkey::Pubkey,
    /// The associated token program
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl PayOutSplTokenV1 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pot, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.game_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.winner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pot_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.winner_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.game_authority_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = PayOutSplTokenV1InstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::BGL_GAME_POT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct PayOutSplTokenV1InstructionData {
    discriminator: u8,
}

impl PayOutSplTokenV1InstructionData {
    fn new() -> Self {
        Self { discriminator: 6 }
    }
}

/// Instruction builder for `PayOutSplTokenV1`.
///
/// ### Accounts:
///
///   0. `[writable]` pot
///   1. `[writable, signer]` game_authority
///   2. `[]` winner
///   3. `[]` token_mint
///   4. `[writable]` pot_token_account
///   5. `[writable]` winner_token_account
///   6. `[writable]` game_authority_token_account
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   8. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct PayOutSplTokenV1Builder {
    pot: Option<solana_program::pubkey::Pubkey>,
    game_authority: Option<solana_program::pubkey::Pubkey>,
    winner: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    pot_token_account: Option<solana_program::pubkey::Pubkey>,
    winner_token_account: Option<solana_program::pubkey::Pubkey>,
    game_authority_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl PayOutSplTokenV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The address of the game pot
    #[inline(always)]
    pub fn pot(&mut self, pot: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pot = Some(pot);
        self
    }
    /// The authority of the game pot
    #[inline(always)]
    pub fn game_authority(&mut self, game_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_authority = Some(game_authority);
        self
    }
    /// The account receiving the payout
    #[inline(always)]
    pub fn winner(&mut self, winner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.winner = Some(winner);
        self
    }
    /// The address of the token mint
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    /// The source token account
    #[inline(always)]
    pub fn pot_token_account(
        &mut self,
        pot_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pot_token_account = Some(pot_token_account);
        self
    }
    /// The destination token account
    #[inline(always)]
    pub fn winner_token_account(
        &mut self,
        winner_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.winner_token_account = Some(winner_token_account);
        self
    }
    /// The token account of the game authority
    #[inline(always)]
    pub fn game_authority_token_account(
        &mut self,
        game_authority_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.game_authority_token_account = Some(game_authority_token_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// The associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = PayOutSplTokenV1 {
            pot: self.pot.expect("pot is not set"),
            game_authority: self.game_authority.expect("game_authority is not set"),
            winner: self.winner.expect("winner is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            pot_token_account: self
                .pot_token_account
                .expect("pot_token_account is not set"),
            winner_token_account: self
                .winner_token_account
                .expect("winner_token_account is not set"),
            game_authority_token_account: self
                .game_authority_token_account
                .expect("game_authority_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `pay_out_spl_token_v1` CPI accounts.
pub struct PayOutSplTokenV1CpiAccounts<'a, 'b> {
    /// The address of the game pot
    pub pot: &'b solana_program::account_info::AccountInfo<'a>,
    /// The authority of the game pot
    pub game_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account receiving the payout
    pub winner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the token mint
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account
    pub pot_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account
    pub winner_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account of the game authority
    pub game_authority_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `pay_out_spl_token_v1` CPI instruction.
pub struct PayOutSplTokenV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the game pot
    pub pot: &'b solana_program::account_info::AccountInfo<'a>,
    /// The authority of the game pot
    pub game_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account receiving the payout
    pub winner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the token mint
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account
    pub pot_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account
    pub winner_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account of the game authority
    pub game_authority_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> PayOutSplTokenV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: PayOutSplTokenV1CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            pot: accounts.pot,
            game_authority: accounts.game_authority,
            winner: accounts.winner,
            token_mint: accounts.token_mint,
            pot_token_account: accounts.pot_token_account,
            winner_token_account: accounts.winner_token_account,
            game_authority_token_account: accounts.game_authority_token_account,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pot.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.game_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.winner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pot_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.winner_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.game_authority_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = PayOutSplTokenV1InstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BGL_GAME_POT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pot.clone());
        account_infos.push(self.game_authority.clone());
        account_infos.push(self.winner.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.pot_token_account.clone());
        account_infos.push(self.winner_token_account.clone());
        account_infos.push(self.game_authority_token_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PayOutSplTokenV1` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pot
///   1. `[writable, signer]` game_authority
///   2. `[]` winner
///   3. `[]` token_mint
///   4. `[writable]` pot_token_account
///   5. `[writable]` winner_token_account
///   6. `[writable]` game_authority_token_account
///   7. `[]` token_program
///   8. `[]` associated_token_program
///   9. `[]` system_program
pub struct PayOutSplTokenV1CpiBuilder<'a, 'b> {
    instruction: Box<PayOutSplTokenV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PayOutSplTokenV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PayOutSplTokenV1CpiBuilderInstruction {
            __program: program,
            pot: None,
            game_authority: None,
            winner: None,
            token_mint: None,
            pot_token_account: None,
            winner_token_account: None,
            game_authority_token_account: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The address of the game pot
    #[inline(always)]
    pub fn pot(&mut self, pot: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pot = Some(pot);
        self
    }
    /// The authority of the game pot
    #[inline(always)]
    pub fn game_authority(
        &mut self,
        game_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_authority = Some(game_authority);
        self
    }
    /// The account receiving the payout
    #[inline(always)]
    pub fn winner(
        &mut self,
        winner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.winner = Some(winner);
        self
    }
    /// The address of the token mint
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    /// The source token account
    #[inline(always)]
    pub fn pot_token_account(
        &mut self,
        pot_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pot_token_account = Some(pot_token_account);
        self
    }
    /// The destination token account
    #[inline(always)]
    pub fn winner_token_account(
        &mut self,
        winner_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.winner_token_account = Some(winner_token_account);
        self
    }
    /// The token account of the game authority
    #[inline(always)]
    pub fn game_authority_token_account(
        &mut self,
        game_authority_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_authority_token_account = Some(game_authority_token_account);
        self
    }
    /// The token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// The associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = PayOutSplTokenV1Cpi {
            __program: self.instruction.__program,

            pot: self.instruction.pot.expect("pot is not set"),

            game_authority: self
                .instruction
                .game_authority
                .expect("game_authority is not set"),

            winner: self.instruction.winner.expect("winner is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            pot_token_account: self
                .instruction
                .pot_token_account
                .expect("pot_token_account is not set"),

            winner_token_account: self
                .instruction
                .winner_token_account
                .expect("winner_token_account is not set"),

            game_authority_token_account: self
                .instruction
                .game_authority_token_account
                .expect("game_authority_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct PayOutSplTokenV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pot: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    winner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pot_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    winner_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_authority_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
